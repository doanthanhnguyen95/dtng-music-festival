name: Terraform

# on:
#   push:
#     branches:
#       - main
on: 
  workflow_dispatch:

jobs:
  create-backend:
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: .github/workflows
    # if: >
    #   github.event_name == 'push' &&
    #   github.ref == 'refs/heads/main' &&
    #   !contains(github.event.head_commit.message, '[skip create-backend]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check backend state
        id: backend-check
        run: |
          echo "::set-output name=backend-exists::$(az storage account show -n example -g example --query 'name' -o tsv 2>/dev/null || echo false)"
        env:
          AZURE_LOGIN_METHOD: service-principal
          AZURE_USERNAME: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_PASSWORD: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create backend
        if: ${{ steps.backend-check.outputs.backend-exists == 'false' }}
        uses: hashicorp/setup-terraform@v1
        with:
          backend-config: |
            storage_account_name = "example"
            container_name       = "terraform-state"
            key                  = "example.terraform.tfstate"
            resource_group_name  = "example"
        env:
          AZURE_LOGIN_METHOD: service-principal
          AZURE_USERNAME: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_PASSWORD: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Save backend file
        if: ${{ steps.backend-check.outputs.backend-exists == 'false' }}
        # working-directory: .github/workflow
        run: |
          mkdir -p backend
          terraform output > backend/backend.tf
        env:
          AZURE_LOGIN_METHOD: service-principal
          AZURE_USERNAME: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_PASSWORD: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Save state file
        if: ${{ steps.backend-check.outputs.backend-exists == 'false' }}
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state
          path: backend

  terraform-init-plan:
    runs-on: ubuntu-latest
    needs: create-backend
    # defaults:
    #   run:
    #     working-directory: .github/workflows
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Terraform init
        uses: hashicorp/setup-terraform@v1

      - name: Terraform plan
        working-directory: .github/workflows
        run: |
          terraform init
          terraform plan -out=tfplan
        env:
          TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
          TF_VAR_client_id: ${{ secrets.TF_VAR_client_id }}
          TF_VAR_client_secret: ${{ secrets.TF_VAR_client_secret }}
          TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}

      - name: Save Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: .github/workflows/tfplan
      
      - name: check directory
        run: ls -al .

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    # permissions:
    #   approvals: 2
    # defaults:
    #   run:
    #     working-directory: .github/workflows
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform plan artifact
        # working-directory: .github/workflows
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      - name: check directory .github/workflows
        working-directory: .github/workflows
        run: ls -al .

      - name: check directory root
        run: ls -al 

      - name: Terraform apply
        working-directory: .github/workflows
        run: |
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
          TF_VAR_client_id: ${{ secrets.TF_VAR_client_id }}
          TF_VAR_client_secret: ${{ secrets.TF_VAR_client_secret }}
          TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
